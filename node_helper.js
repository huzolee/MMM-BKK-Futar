/**
 * BudapestGo
 * BudapestGo MagicMirror² module
 * 
 * Version 1.0.0
 * By SZECSKÓ Zoltán <zoltan.szecsko@gmail.com>
 * 
 * License MIT
 * 
 * This is an autogenerated file. DO NOT EDIT!
 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('node-fetch')) :
  typeof define === 'function' && define.amd ? define(['node-fetch'], factory) :
  (global = global || self, factory(global.fetch));
}(this, (function (fetch) { 'use strict';

  fetch = fetch && Object.prototype.hasOwnProperty.call(fetch, 'default') ? fetch['default'] : fetch;

  var NodeHelper = require('node_helper');
  module.exports = NodeHelper.create({
      start: function () {
          this.stopTimes = [];
          this.stops = [];
          this.routes = [];
          this.trips = [];
          this.config = {};
      },
      socketNotificationReceived: function (notification, payload) {
          if (notification === 'BudapestGoSocNotRegistered') {
              this.config = payload.config;
              this.updateDisplay(0);
          }
      },
      updateDisplay: function (delay) {
          var _this = this;
          clearTimeout(this.updateTimer);
          this.updateTimer = setTimeout(function () { return _this.getData(); }, delay);
      },
      getData: function () {
          var stopIds = this.config['stopIds'];
          var stopIdParams = '';
          for (var i = 0; i < stopIds.length; i++) {
              stopIdParams = stopIdParams.concat('&stopId=', stopIds[i]);
          }
          var self = this;
          fetch('https://futar.bkk.hu/api/query/v1/ws/otp/api/where/arrivals-and-departures-for-stop.json?routes,trips,stops&minutesBefore=1&minutesAfter=30&stopId=BKK_F01219' +
              stopIdParams, {
              method: 'GET',
              headers: {
                  'Content-Type': 'application/json',
              },
          })
              .then(function (response) { return response.json(); })
              .then(function (data) {
              self.processData(data);
          })
              .catch(function (error) {
              console.error('Error:', error);
          });
      },
      processData: function (body) {
          var currentTime = body['currentTime'];
          var rowsToDisplay = [];
          this.stopTimes = this.getStopTimes(body['data']['entry']['stopTimes']);
          this.stops = this.getStops(body['data']['references']['stops']);
          this.routes = this.getRoutes(body['data']['references']['routes']);
          this.trips = this.getTrips(body['data']['references']['trips']);
          for (var _i = 0, _a = this.stops; _i < _a.length; _i++) {
              var stop = _a[_i];
              var stopName = stop.name;
              var stopRouteIds = stop.routeIds;
              for (var _b = 0, _c = this.routes; _b < _c.length; _b++) {
                  var route = _c[_b];
                  var routeId = route.id;
                  if (this.isRouteIdInRouteArray(routeId, stopRouteIds)) {
                      var shortName = route.shortName;
                      for (var _d = 0, _e = this.trips; _d < _e.length; _d++) {
                          var trip = _e[_d];
                          if (trip.routeId === routeId) {
                              var tripHeadsign = trip.tripHeadsign;
                              for (var _f = 0, _g = this.stopTimes; _f < _g.length; _f++) {
                                  var stopTime = _g[_f];
                                  if (trip.id === stopTime.tripId) {
                                      var timeToDeparture = void 0;
                                      var predictedDepartureTime = stopTime.predictedDepartureTime;
                                      if (!predictedDepartureTime) {
                                          timeToDeparture = stopTime.departureTime.getTime() - currentTime;
                                      }
                                      else {
                                          timeToDeparture = predictedDepartureTime.getTime() - currentTime;
                                      }
                                      var timeToDepartureInMins = Math.trunc(timeToDeparture / 1000 / 60);
                                      if (timeToDepartureInMins >= 5 && timeToDepartureInMins <= 15) {
                                          rowsToDisplay.push({
                                              stop: stopName,
                                              line: shortName,
                                              stopHead: tripHeadsign,
                                              waiting: timeToDepartureInMins,
                                          });
                                      }
                                  }
                              }
                          }
                      }
                  }
              }
          }
          rowsToDisplay = this.sortRoutesByWaiting(rowsToDisplay);
          this.sendNotificationForBKKCourier(rowsToDisplay);
          this.updateDisplay(60 * 1000);
      },
      getStopTimes: function (stopTimes) {
          var stopTimeList = [];
          for (var i in stopTimes) {
              stopTimeList.push({
                  stopHeadsign: stopTimes[i]['stopHeadsign'],
                  departureTime: stopTimes[i]['departureTime']
                      ? new Date(stopTimes[i]['departureTime'] * 1000)
                      : undefined,
                  predictedDepartureTime: stopTimes[i]['predictedDepartureTime']
                      ? new Date(stopTimes[i]['predictedDepartureTime'] * 1000)
                      : undefined,
                  tripId: stopTimes[i]['tripId'],
              });
          }
          return stopTimeList;
      },
      getStops: function (stops) {
          var stopList = [];
          for (var i in stops) {
              stopList.push({ id: stops[i]['id'], name: stops[i]['name'], routeIds: stops[i]['routeIds'] });
          }
          return stopList;
      },
      getRoutes: function (routes) {
          var routeList = [];
          for (var i in routes) {
              routeList.push({
                  id: routes[i]['id'],
                  shortName: routes[i]['shortName'],
                  type: routes[i]['type'],
              });
          }
          return routeList;
      },
      getTrips: function (trips) {
          var tripList = [];
          for (var i in trips) {
              tripList.push({
                  id: trips[i]['id'],
                  routeId: trips[i]['routeId'],
                  tripHeadsign: trips[i]['tripHeadsign'],
              });
          }
          return tripList;
      },
      sendNotificationForBKKCourier: function (comingRoutes) {
          this.sendSocketNotification('BKKFutarNotificationSent', comingRoutes);
      },
      isRouteIdInRouteArray: function (routeId, routeIds) {
          return routeIds.includes(routeId) ? true : false;
      },
      sortRoutesByWaiting: function (comingRoutes) {
          return (comingRoutes = comingRoutes.sort(this.compareFunc));
      },
      compareFunc: function (a, b) {
          return a['waiting'] - b['waiting'];
      },
  });

})));
